AWSTemplateFormatVersion: "2010-09-09"
Description:
  A stack for deploying containerized applications onto EC2/Fargate
  hosts using Elastic Container Service.
Outputs:
  ServiceHost:
    Value: !GetAtt LoadBalancer.DNSName
  ServiceUrl:
    Value: !Sub 'http://${LoadBalancer.DNSName}/'
Parameters:
  ECSCluster:
    Type: String
    Description: ECS Cluster
  SubnetIds:
    Description: The VPC subnets for ELB
    Type: String
  VPCId:
    Description: Id of the VPC that this Cluster will be in
    Type: String
  ServicesSecurityGroup:
    Description: Ecs services Security Group
    Type: String
  PrivateSubnetIds:
    Description: The VPC subnets
    Type: String
  VpcCidr:
    Type: String
    Default: 172.16.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  DesiredCount:
    Type: String
  ContainerCpu:
    Type: String
  ContainerMemory:
    Type: String
  ContainerPort:
    Type: String
  ImageUrl:
    Type: String
  MigrateUrl:
    Type: String
  DatabaseHostname:
    Type: String
  DatabaseSecret:
    Type: String

Resources:
  AppExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: '*'
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
  AppTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: app
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      ExecutionRoleArn: !GetAtt AppExecutionRole.Arn
      TaskRoleArn: !Ref AppTaskRole
      ContainerDefinitions:
      - Name: app
        Image: !Ref ImageUrl
        PortMappings:
          - ContainerPort: !Ref ContainerPort
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-create-group: "true"
            awslogs-region: !Ref AWS::Region
            awslogs-group: hat-market-logs
            awslogs-stream-prefix: service-app
        Command: ['python3', '/app/app.py']
        Environment:
        - Name: DB_URI
          Value: !Sub
          - 'postgresql://${User}:${Pass}@${Host}:5432/howdy'
          - Host: !Ref DatabaseHostname
            User: !Sub "{{resolve:secretsmanager:${DatabaseSecret}::username}}"
            Pass: !Sub "{{resolve:secretsmanager:${DatabaseSecret}::password}}"

  EcsSecurityGroupIngressFromInternalALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the Internal ALB
      GroupId: !Ref ServicesSecurityGroup
      IpProtocol: "-1"
      CidrIp: !Ref VpcCidr

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Internal facing load balancer
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        # Allow access to ALB
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 80
          FromPort: 80

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "5"
      Subnets: !Split [",", !Ref SubnetIds]
      SecurityGroups:
        - !Ref LoadBalancerSG
  LoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetType: ip
      VpcId: !Ref VPCId
      Matcher:
        HttpCode: 200,301
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '10'

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 1
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref LoadBalancerListenerHTTP

  Service:
    DependsOn:
      - LoadBalancerRule
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ServicesSecurityGroup
          Subnets: !Split [ ',', !Ref PrivateSubnetIds ]
  MigrationsContainerDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: migrate
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      ExecutionRoleArn: !GetAtt AppExecutionRole.Arn
      TaskRoleArn: !Ref AppTaskRole
      NetworkMode: awsvpc
      ContainerDefinitions:
      - Name: migrate
        Image: !Ref MigrateUrl
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-create-group: "true"
            awslogs-region: !Ref AWS::Region
            awslogs-group: hat-market-logs
            awslogs-stream-prefix: service-migrations
        Command: ['alembic', 'upgrade', 'head']
        Environment:
        - Name: DB_URI
          Value: !Sub
          - 'postgresql://${User}:${Pass}@${Host}:5432/howdy'
          - Host: !Ref DatabaseHostname
            User: !Sub "{{resolve:secretsmanager:${DatabaseSecret}::username}}"
            Pass: !Sub "{{resolve:secretsmanager:${DatabaseSecret}::password}}"
